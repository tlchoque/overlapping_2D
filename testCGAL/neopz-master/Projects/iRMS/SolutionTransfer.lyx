#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Fast information transfer between meshes through sparse matrix multiply
\end_layout

\begin_layout Author
Philippe Devloo
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
When working with multiphysics problems, the numerical analyst is confronted
 with the dilemna of whether to solve the numerical problem totally coupled
 or implement an iterative scheme where the solution of one part of the
 system becomes input of other parts configuring as such a low order iterative
 method.
\end_layout

\begin_layout Standard
As an example problem, a model of multi phase flow is presented with geomechanic
 coupling.
 In this system of equations three fenomena are coupled: the flow through
 porous media, the transport of the fases and the deformation of the elastic
 rock.
 The flow through porous media is simulated using mixed finite elements
 coupling the flux and pressure approximations.
 The flux quantity is approximated using an HDiv conforming space and the
 pressure quantity using an elementwise discontinuous space.
 The fases are modeled by a saturation variable.
 The saturations are modeled by a piecewise constant approximation space.
 The elastic deformation of the porous matrix and surounding geomechanical
 rock formation is modeled by continuous finite elements.
\end_layout

\begin_layout Standard
Although it is feasable to transfer the information between the different
 approximation spaces through interpolation of the variables on the different
 approximation spaces, such an approach will not be numerically efficient:
 too much data (e.g.
 shape functions, solutions, coordinate transformations) has to be recomputed
 at each solution transfer.
\end_layout

\begin_layout Standard
The information which needs to be transferred from one mesh to the other
 is linear and can be represented by a matrix vector multiplication.
 But even this straightforward approach can be optimized by a sequence of
 gather scatter operations.
 It is the objective of this paper to describe the systematics of an efficient
 information flow that models the transfer of the information of one mesh
 to another.
\end_layout

\begin_layout Section
The basics of a finite element computation
\end_layout

\begin_layout Standard
In this section we demonstrate that the residual of a nonlinear finite element
 computations can be configured as a sequence of a sparse matrix vector
 multiply followed by 
\emph on
some
\emph default
 nonlinear computation and another sparse matrix multiplication.
 This approach may accelerate the residual computation, at the cost of the
 use of more computer memory.
\end_layout

\begin_layout Standard
Assume that the form of the differential equation is
\begin_inset Formula 
\begin{eqnarray}
-div(K(u)\nabla u) & = & f\;\; x\in\Omega\label{eq:strong}\\
-K(u)\nabla u.n & = & g(s)\;\; s\in\partial\Omega_{N}\nonumber \\
u(s) & = & u_{D}(s)\;\; s\in\partial\Omega_{D}\nonumber 
\end{eqnarray}

\end_inset

where 
\begin_inset Formula $K(u)$
\end_inset

 is a tensor which depends on the value of the solution.
 The weak formulation of the equation 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:strong"

\end_inset

 can be written as: find 
\begin_inset Formula $u\in V(\Omega)\subset H(\Omega)$
\end_inset

 such that 
\begin_inset Formula 
\[
\int_{\Omega}\nabla\phi_{i}K(u)\nabla ud\Omega=\int_{\Omega}\phi_{i}fd\Omega\;\;\forall\phi_{i}\in V(\Omega)
\]

\end_inset

where 
\begin_inset Formula $u$
\end_inset

 can be written as
\begin_inset Formula 
\[
u=\Sigma_{j}\alpha_{j}\phi_{i}
\]

\end_inset


\end_layout

\begin_layout Standard
The weak statement applied to a finite element discretization results in
 the computation of element stiffness matrices and right hand sides of the
 form
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
K_{ij}^{e} & = & \int_{\Omega_{e}}\nabla\phi_{i}\cdot K(u)\nabla\phi_{j}d\Omega\\
F_{i}^{e} & = & \int_{\Omega_{e}}\phi_{i}fd\Omega
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
which is in turn transformed into a sum of contributions computed in integration
 points
\begin_inset Formula 
\begin{eqnarray*}
K_{ij}^{e} & = & \sum_{l=0}^{l<np}\nabla\phi_{i}(\xi_{l})\cdot K(u(x(\xi_{l})))\nabla\phi_{j}(\xi_{l})|J(\xi_{l})|W_{l}\\
F_{i}^{e} & = & \sum_{l=0}^{l<np}\phi_{i}(\xi_{l})f(x(\xi_{i}))|J(\xi_{i})|W_{i}
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
When solving nonlinear problems the residual of the weak statement needs
 to be computed frequently
\begin_inset Formula 
\[
R_{i}^{e}=\sum_{l=0}^{l<np}\left(\phi_{i}(\xi_{l})f(x(\xi_{i}))-\nabla\phi_{i}(\xi_{l})K(u(x(\xi_{l}))\nabla u(x(\xi_{l}))\right)|J(\xi_{i})|W_{i}
\]

\end_inset


\end_layout

\begin_layout Section
Computing the quantities of interest at the integration points
\end_layout

\begin_layout Standard
As seen in the previous section, the quantities of interest which varie
 from one iteration to another are the values of 
\begin_inset Formula $u$
\end_inset

 and 
\begin_inset Formula $\nabla u$
\end_inset

 computed at the integration points.
 These quantities depend linearly on the multiplying coeficients 
\begin_inset Formula $\alpha_{i}$
\end_inset

 of the finite element approximation and can therefore be represented by
 a linear transformation.
\end_layout

\begin_layout Standard
Assume that all integration points have a unique indexation such that
\begin_inset Formula 
\[
\xi_{L}=\xi_{l}^{e}
\]

\end_inset

where 
\begin_inset Formula $\xi_{l}^{e}$
\end_inset

 represents the lth integration point of element 
\emph on
e
\emph default
.
 Define the vector 
\begin_inset Formula $u_{L}$
\end_inset

 and 
\begin_inset Formula $\nabla u_{L}$
\end_inset

 as the vector of values 
\begin_inset Formula $u$
\end_inset

 computed at the integration points 
\begin_inset Formula $\xi_{L}$
\end_inset

.
 The values of 
\begin_inset Formula $u_{L}$
\end_inset

 and 
\begin_inset Formula $\nabla u_{L}$
\end_inset

 can be computed as
\begin_inset Formula 
\begin{eqnarray*}
u_{L} & = & M_{u}\alpha\\
\nabla u_{L} & = & M_{\nabla u}\alpha
\end{eqnarray*}

\end_inset

where 
\begin_inset Formula $\alpha$
\end_inset

 represents the vector of multiplying coeficients which define the finite
 element approximation.
 The elements of 
\begin_inset Formula $M_{u}$
\end_inset

 are composed of the values of the element shapefunctions at the integration
 point.
 The elements of 
\begin_inset Formula $M_{\nabla u}$
\end_inset

 are composed of the values of the gradients of the shapefunctions computed
 at the integration points.
\end_layout

\begin_layout Standard
Assuming that a vector associated with the integration points is computed
 with values 
\begin_inset Formula $f_{L}=f(x(\xi_{L}))|J(x_{L})|W_{L}$
\end_inset

 then the assembled load vector 
\begin_inset Formula $F$
\end_inset

 can be computed as
\begin_inset Formula 
\[
F=M_{u}^{T}f_{L}
\]

\end_inset


\end_layout

\begin_layout Standard
Similarly, defining a vector 
\begin_inset Formula $K_{L}$
\end_inset

 associated with the values of the conservation law 
\begin_inset Formula $K_{L}=K(u_{L})\nabla u_{L}|J(x_{L})|W_{L}$
\end_inset

 where each value at an integration point is a vector, then the matrix vector
 multiply 
\begin_inset Formula $K\alpha$
\end_inset

 can be computed as
\begin_inset Formula 
\[
K\alpha=M_{\nabla u}^{T}\alpha
\]

\end_inset


\end_layout

\begin_layout Standard
The apealing aspect of this approach to finite element computations is that
 the computation of 
\begin_inset Formula $u_{L}$
\end_inset

 and 
\begin_inset Formula $\nabla u_{L}$
\end_inset

 are linear operations which potentially are efficiently computed on GPU's.
 The nonlinear computations are performed on a 
\emph on
per point
\emph default
 basis and can be massively paralelized.
 Finally the computation of the residual is also cast in a linear algebra
 framework and is related to the first operation.
 The second assembly operation may be much harder to paralelize due to the
 concurrent write access to memory.
\end_layout

\begin_layout Section
Multiphysics computations
\end_layout

\begin_layout Standard
Multiphysics computations are defined as approximations of coupled systems
 of partial differential equations where different state variables are represent
ed by differing functional spaces.
 For example, when approximation multiphase flow through porous media with
 geomechanic coupling, an efficient strategy would envolve using
\end_layout

\begin_layout Itemize
An HDiv space 
\begin_inset Formula $Q$
\end_inset

 for approximating the global flux
\end_layout

\begin_layout Itemize
A discontinuous space for the pressure variable 
\begin_inset Formula $P$
\end_inset


\end_layout

\begin_layout Itemize
A low order discontinuous space for the saturation variables,
\begin_inset Formula $S$
\end_inset


\end_layout

\begin_layout Itemize
A reduced approximation space for the displacement of the porous matrix
 
\begin_inset Formula $U$
\end_inset


\end_layout

\begin_layout Standard
Although it is feasable to build a fully coupled system of equations, it
 is computationally more efficient to solve the variables in groups, iterating
 back and forth to convergence.
 In the case of flow through porous media, good convergence results are
 expected by grouping 
\begin_inset Formula $Q,P,U$
\end_inset

 separately from 
\begin_inset Formula $S$
\end_inset

.
 But this implies that the values of 
\begin_inset Formula $Q,P$
\end_inset

 need to be transferred to the integration points of the mesh representing
 
\begin_inset Formula $S$
\end_inset

 and that the values of 
\begin_inset Formula $S$
\end_inset

 need to be transferred to the integration points of the multiphysics mesh
 involving 
\begin_inset Formula $Q,P$
\end_inset

 and 
\begin_inset Formula $U$
\end_inset

.
 The integration points of the 
\begin_inset Formula $S$
\end_inset

 mesh are associated with interfaces whereas the integration points associated
 with 
\begin_inset Formula $Q,P,U$
\end_inset

 are associated with the interior of the elements.
 When integrating the saturation and in order to garantee elementwise conservati
on, one requires the value of the average flux value instead of the pointwise
 value.
\end_layout

\begin_layout Subsection
Remarks
\end_layout

\begin_layout Standard
The relevant fact of the solution transfer between the different meshes
 is that the information that is required is linearly dependent on the multiplyi
ng coeficients.
 Hence, the information can be transferred by a matrix vector multiplication.
 
\end_layout

\begin_layout Section
Building the transfer matrix
\end_layout

\begin_layout Subsection
From the saturation mesh to the pressure/flux mesh
\end_layout

\begin_layout Standard
Assume that the integration points of 
\begin_inset Formula $Q,P,U$
\end_inset

 are numbered sequentially and that we want to fill them with the value
 of the saturation(s).
 Each integration point corresponds to an element and point defined in master
 coordinates.
 For this point, a corresponding point can be identified in the mesh that
 defines the saturation approximation.
 
\end_layout

\begin_layout Standard
Denote 
\begin_inset Formula $i$
\end_inset

 as the index of the integration point and 
\begin_inset Formula $j_{\phi_{S}k}$
\end_inset

 as the position of the 
\begin_inset Formula $kth$
\end_inset

 shape function of the corresponding element in saturation space.
 Let 
\begin_inset Formula $\phi_{S}^{k}$
\end_inset

 represent the value of the 
\begin_inset Formula $kth$
\end_inset

 shape function.
 As such the values of the transfer matrix are defined as
\begin_inset Formula 
\[
M_{S,ij_{\phi_{S}k}}=\phi_{S}^{k}
\]

\end_inset


\end_layout

\begin_layout Standard
If the saturation is represented by constant values, only one entry of every
 line will be different form zero.
\end_layout

\begin_layout Subsection
From the pressure/flux mesh to the saturation
\end_layout

\begin_layout Standard
The transport equation which characterizes the evolution of the saturation
 involves, after discretization, integrals over the element and integrals
 over the interfaces between elements.
\end_layout

\begin_layout Standard
When transferring the information from the HDiv mesh to the saturation mesh,
 it is noted that at each integration point, values of the left and right
 hand pressure are needed.
 These need to be computed by separate matrices.
\end_layout

\begin_layout Paragraph*
Pressure values
\end_layout

\begin_layout Standard
The pressure values are obtained by the linear combination of the pressure
 shape functions multiplied by the corresponding multiplier coeficient of
 the pressure solution
\end_layout

\end_body
\end_document
