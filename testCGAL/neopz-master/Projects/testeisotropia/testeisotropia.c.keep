

#include "pzfmatrix.h"
#include "pztempmat.h" 
#include "pzskylmat.h"
#include "pzgmesh.h"
#include "pzcmesh.h"
#include "pzgnode.h"
#include "pzsolve.h"
#include "pzelg1d.h"
#include "pzmat1dlin.h"
#include "pzelmat.h"
#include "pzelasmat.h"
#include "pzcompel.h"
#include "pzbndcond.h"
#include "pzstack.h"
#include "pztrnsform.h"
#include <stdlib.h>
#include <iostream.h>
#include "pzvec.h"

#include "pzelgq2d.h"
#include "pzelgt2d.h"
#include "pzmat2dlin.h"
#include "pzanalysis.h"
#include "pzmetis.h"
#include "pzmatplaca2.h"
#include "pzmultplaca.h"
#include "tpzmultcamada.h"

#include <stdio.h>
#include <time.h>
#include "pzelct2d.h"
//template<class T>
//class TPZVec;
//#define NOTDEBUG

TPZMultCamada *LerMaterial(char *filename);

int main() {

// valores auxiliares
  int nshape=4;
  TPZFMatrix phi(nshape,1,0.),dphi(2,nshape,0.), axes(3,3,0.),dsol(2,6,0.);
  TPZVec<REAL>  x(3,0.),sol(6,0.);

// funcoes de forma e derivadas para um dado ponto da placa
  REAL ksi,eta;
  cout << " Coordenadas de um ponto da placa:(-1<ksi<1)  ksi =";
  cin >> ksi;
  cout << "                                  (-1<eta<1)  eta =";
  cin >> eta;
  phi(0,0)=(1.0 - ksi)*(1.0 - eta)/4.0;
  phi(1,0)=(1.0 + ksi)*(1.0 - eta)/4.0;
  phi(2,0)=(1.0 + ksi)*(1.0 + eta)/4.0;
  phi(3,0)=(1.0 - ksi)*(1.0 + eta)/4.0;
  dphi(0,0)=-(1.0 - eta)/4.0;
  dphi(1,0)=-(1.0 - ksi)/4.0;
  dphi(0,1)= (1.0 - eta)/4.0;
  dphi(1,1)=-(1.0 + ksi)/4.0;
  dphi(0,2)= (1.0 + eta)/4.0;
  dphi(1,2)= (1.0 + ksi)/4.0;
  dphi(0,3)=-(1.0 + eta)/4.0;
  dphi(1,3)= (1.0 - ksi)/4.0;


// direcoes de integracao
  axes(0,0)=1.0; axes(1,0)=0.0; axes(2,0)=0.0;
  axes(0,1)=0.0; axes(1,1)=1.0; axes(2,1)=0.0;
  axes(0,2)=0.0; axes(1,2)=0.0; axes(2,2)=1.0;

// coordenadas x (nao usadas)
  x[0]=1.0; x[1]=0.0; x[2]=0.0;


  TPZFMatrix   ek(6*nshape,6*nshape,0.), ef(6*nshape,1,0.) , ek1(6*nshape,6*nshape,0.) , ef1 (6*nshape,1,0.);
  TPZMultCamada *mat1=LerMaterial("teste1.ttt");



  TPZMultCamada *mat2=LerMaterial("teste2.ttt");

  mat1->Contribute(x,sol,dsol,1.,axes,phi,dphi,ek,ef);
  mat2->Contribute(x,sol,dsol,1.,axes,phi,dphi,ek1,ef1);
 
//  testes preliminares

//  TPZFMatrix matriz;
//  matriz = mat1->Camada(0)->Kn1n1;
//  matriz.Print("kn1n1 mat 1");
//  matriz = mat2->Camada(0)->Kn1n1;
//  matriz.Print("k1n1n1 mat 2");


  ofstream saida("testesai.dat");
  REAL dif;
  int  numocorrencia=0;
  saida << "Diferencas > 1E-11 para vetor ej \n";
  saida << "Coord.      Dif. \n";
  for (int i=0; i<6*nshape; i++){
    dif= ef(i) - ef1(i);
   if (fabs(dif) > 1E-11) {
      saida << i << dif << "\n";
      numocorrencia += 1;
   }
  }    
  cout << "Numero de Ocorrencia Dif > 1E-11 no vetor  ej =" << numocorrencia << endl;
  numocorrencia=0;
  saida << "Diferencas > 1E-11 para matriz ek \n";
  saida << "Coord. i   Coord. j   Dif. \n";
  for (int i=0; i<6*nshape; i++){
   for (int j=0; j<6*nshape;j++){
    dif= ek1(i,j) - ek(i,j);
    if (fabs(dif) > 1E-11){
      saida << i << "   " << j << "   " << dif << "\n";
      numocorrencia += 1;
    }
   }
  }
  saida.flush();
  cout << "Numero de Ocorrencia Dif > 1E-11 na matriz ek ="<< numocorrencia << endl;
  delete mat1;
  delete mat2;
  return 0;
}


TPZMultCamada *LerMaterial(char *filename) {
  ifstream input(filename);
  TPZFMatrix naxes(3,3);
  REAL ni1,ni2,h,E1,E2,G12,G13,G23,f;
  REAL n00,n01,n02,n10,n11,n12,n20,n21,n22;
  TPZVec<REAL> xf(6), esp(1);
  REAL g,st,ct,PI=3.1415926536;
  int matindex, numcamadas,i,numbc,camadaref, materialtype;
  input >> matindex >> numcamadas >> camadaref >> materialtype;
  TPZMultCamada *matcamadas = new TPZMultCamada(matindex);
  esp.Resize(numcamadas);
  for(i=0; i<numcamadas; i++) input >> esp[i];
  for(i=0; i< numcamadas; i++) {
   input >> f  >>  h  >>
            E1 >>  E2 >>
            G12 >> G13 >> G23 >>
            ni1 >> ni2;
    // input >> n00 >> n01 >> n02 >> n10 >> n11 >> n12 >> n20 >> n21 >> n22;
    cout << "Angulo (graus) do eixo x ao eixo n = ";
    cin >> g;
    g = g*PI/180.;
    ct = cos(g);
    st = sin(g);
    n00=ct; n01=st; n02=0; n10=-st; n11=ct; n12=0.; n20=0.; n21=0.; n22=1.;
 
    if(materialtype == 1) {
      xf.Resize(3*(numcamadas+1));
      int i;
      for(i=0; i< 3*(numcamadas+1); i++) input >> xf[i];
    } else {
      input >> xf[0] >> xf[1] >> xf[2] >> xf[3] >> xf[4] >> xf[5];
    }
    naxes(0,0) =  n00;    naxes(0,1) =  n01;    naxes(0,2) =  n02;
    naxes(1,0) =  n10;    naxes(1,1) =  n11;    naxes(1,2) =  n12;
    naxes(2,0) =  n20;    naxes(2,1) =  n21;    naxes(2,2) =  n22;
    if(materialtype == 1) {
      matcamadas->AddLayer(new TPZMultPlaca(-1,h,esp,f,E1,E2,ni1,ni2,G12,G13,G23,naxes,xf,camadaref,i));
    } else {
      matcamadas->AddLayer(new TPZMatPlaca2(-1,h,f,E1,E2,ni1,ni2,G12,G13,G23,naxes,xf));
    }
  }
  return matcamadas;
}

  
